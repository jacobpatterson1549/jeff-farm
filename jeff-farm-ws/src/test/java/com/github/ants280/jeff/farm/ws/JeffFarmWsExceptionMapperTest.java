package com.github.ants280.jeff.farm.ws;

import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.Response;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.server.model.Resource;
import org.glassfish.jersey.test.JerseyTest;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

@RunWith(Parameterized.class)
public class JeffFarmWsExceptionMapperTest extends JerseyTest
{
	private final int index;
	private final int expectedStatus;
	private final String message;

	public JeffFarmWsExceptionMapperTest(
		int index, int expectedStatus, String message)
	{
		this.index = index;
		this.expectedStatus = expectedStatus;
		this.message = message;
	}

	@Parameterized.Parameters(name = "{index}:expectedStatus: {1}")
	public static Iterable<Object[]> data()
	{
		return Arrays.asList(
				new Object[] { 1, 400, "[test 400 status]" },
				new Object[] { 2, 500, null }, // (do not check message, it is generated by server)
				new Object[] { 3, 200, "[test 200 status]" });
	}

	@Override
	protected Application configure()
	{
		Resource.Builder resourceBuilder = Resource.builder("dummy");
		resourceBuilder.addMethod("GET").handledBy(this::handleRequest).build();

		Logger.getLogger("org.glassfish.jersey.internal.Errors").setLevel(Level.OFF); // NOTE: set the logger name to "" to disable all logging

		return new ResourceConfig().registerResources(resourceBuilder.build())
			.register(JeffFarmWsExceptionMapper.class);
	}

	private Response handleRequest(Object containerRequestContext)
	{
		switch (index)
		{
			case 1:
				throw new JeffFarmWsException(message);
			case 2:
				throw new RuntimeException(message);
			case 3:
				return Response.ok(message).build();
			default:
				return null;
		}
	}

	@Test
	public void testToResponse()
	{
		Response response = target("dummy").request().method("GET");
		int actualStatus = response.getStatus();
		String entity = response.readEntity(String.class);

		assertThat(actualStatus, is(expectedStatus));

		if (message != null)
		{
			assertThat(entity, is(message));
		}
	}
}
